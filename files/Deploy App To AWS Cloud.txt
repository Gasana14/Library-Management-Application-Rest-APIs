Understanding AWS 
============================================
AWS (Amazon Web Services) :Amazon Web Services, or AWS, professionals can perform a variety of jobs related to cloud computing, database administration, computer security, computer engineering, and computer development.

AWS Offers many services, but now we are going to look at few services:
------------------------------------------------------------------------
> Amazon EC2 : is a web services that provides secure,resizable compute capacity in the cloud. we need EC2 to
create a virtual server (to install Java,Tomcat,Mysql), it act as PC where we install Java,Tomcat,Mysql etc

> AWS Elastic Beanstalk : It helps to deploy web application for different languages (Java,Python,.Net...), you can
simply upload your codes and Elastic Beanstalk automatically handles the deployment, from capacity provisioning,
load balancing,auto-scaling to application health monitoring.

> RDS (Amazon Relational Database Service) : Helps us to deal with anything related to Database, provides us 
a cloud database and it supports (MySQL,Postgres,MariaDb etc)

> Amazon S3 : Object storage built to store and retrieve any amount of data from anywhere 
(eg: you want to upload JAR file or WAR file, the uploaded codes are stored in Amazon S3 Bucket)

> Amazon Route 53 : A reliable and cost effective way to route end users to internet applications
(eg: whenever you deploy your codes/application to aws, you will need to configure domain name for your application eg:www.myapplication.com)



Steps to Deploy App(REST APIs) To AWS Cloud
==================================================
(Creating Profiles)
-----------------------
> Open your application and go to resources
> Modify the application.properties file (Creating Profiles : this means creatind different application.properties for specific environment (Dev,Prod,QA) etc)
> application.properties file (contains all the common codes for both proprties files and then other properties file contains unique codes)
NB: Check Resources folder (application.properties)

(Creating Meta data)
------------------------
> We have two options, we can use sql files to create/update tables + insert / update datas on database creation or we can have use built in ways to insert data on application Run
> 1st option : Go to Run Application Class and add Command Line Runner (eg : public class LibraryManagementRestApIsApplication implements CommandLineRunner) and implements the required function

@Override
public void run(String... args) throws Exception {
		
}

that's the function that is going to help us to insert data on application run, then we need to autowire repositories to help us to save data into database

@Override
public void run(String... args) throws Exception {
	Role adminRole = new Role();
	adminRole.setName("ROLE_ADMIN");
	roleRepository.save(adminRole);
		
	Role userRole = new Role();
	userRole.setName("ROLE_USER");
	roleRepository.save(userRole);
}

> If you dont have account on AWS/ you have to create it on aws

(Setup / Configure MySQL on AWS)
--------------------------------
> After logged in, Go to Services
> Go to Databases and the Go to RDS
> Find Create database
> Choose a database creation method ( select Standard Create)
> Engine options (select Mysql)
> Templates ( if you dont want to pay, select Free Tier)
> Settings : DB instance identifier( Give a name to your instance eg: learning-aws-dbs)
           : Master username ( Give a username to your instance eg: root)
           : Master password ( Give a password to your instance eg: awsroot123)
	   : Confirm master password ( Repeat a password to your instance eg: awsroot123)

> Connectivity : Public access ( select yes)
> keep other by default as it is
> create on create database
> once the database is created and the status is Available, click on identifier name of ur db instance
> click on Security VPC > security groups > click on default link to configure the security
> inside the table, click on Security group ID
> on Inbound Rule table, click Edit Inbound Rules
> Click on Add Rule btn, and under Type info column choose Mysql/Aurora and Under Source Column choose IP/V4 anywhere and click on save rules

(Connect AWS Mysql Database from MySQL Workbench)
--------------------------------------------------
> Open Workbench
> Create a new Connection
> under hostname: (copy the Endpoint from AWS Database instance and paste it there)
> under username (use the username used while configureing aws db instance)
> under password (store Vault) (use the password used while configureing aws db instance)
> Test the connection by click on Test the connection to make sure everything is ok
> the open your connection and create a database there (eg : library)

(Creating Application JAR File to Upload)
----------------------------------------------------
> Go to AWS Database Instance Under Connectivity & Security > Endpoint Link copy the link (eg : learning-aws-dbs.cngf1ioyf5uv.eu-north-1.rds.amazonaws.com)
> Inside ur IDE Project, edit your application-prod.properties file, edit Mysql datasource link (eg: spring.datasource.url = jdbc:mysql://learning-aws-dbs.cngf1ioyf5uv.eu-north-1.rds.amazonaws.com:3306/library?useSSL=false&serverTimezone=UTC) here, we have replaced localhost with the endpoint link
> then edit username and password with the aws username and password used for configuration / setup
> edit application-prod.properties file by specifying the server port as 5000 (server.port=5000) because aws uses 5000 port
> update the application.properties file by editing profile active to prod file "spring.profiles.active=prod" (this means that it will consider application-prod.properties as the main file)
> to create JAR file, on the Right side of your IDE IntilJ click on MAVEN symbol and select your project > Lifecycle and select clean and install and click on Run Maven Build
> it will create the JAR file in your project under the target folder

(Deploy the JAR File to AWS Cloud)
------------------------------------------------------
> Go AWS Services > Compute > Elastic Bean Stalkbean
> Click on create application
> Application information > Application name (Give it a name eg : springboot-library-management-app)
> Environment information > Domain name (give a domain eg: www.springboot-library-management-app)
> Choose platform > Select Java
> Application code > Select Upload Your code > Local File ( go where your project is stored on local pc, under project > under target folder select the app Jar file)
> Version label ( give it any name eg: springboot-library-management-app-source)
> Click on next ( To Go to the next configuration )

Configure Service Access (If it is the first time, you should create ec2 role eg: go to this link on youtube: https://www.youtube.com/watch?v=3h7PMHnilkM this link will show you how to create ec2)
~~~~~~~~~~~~~~~~~~~~~~~~
> But if you already have ec2 Role created, you can use existing role by selecting the following:
> Configure service access > Service role > select Use an existing service role
> Configure service access > Existing service roles > select : aws-elasticbeanstalk-service-role
> Configure service access > EC2 Instance Profile > select : your create ec2 role (eg: aws-elastic-beanstalk-ec2-role)

Set up networking, database, and tags - optional 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Database Info > Enable database
> Put your RDS Database credentails (username and password )
> click next

Configure updates, monitoring, and logging - optional Info
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
> Platform software Info > Environment properties > add environment property for port ( name : SERVER_PORT , key : 5000)
> click next

After configuring services, then click on SUBMIT and wait for application to be created





	






